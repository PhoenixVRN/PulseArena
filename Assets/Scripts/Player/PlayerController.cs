using UnityEngine;

/// <summary>
/// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–º - –¥–≤–∏–∂–µ–Ω–∏–µ –∏ –∏–º–ø—É–ª—å—Å (2D –≤–µ—Ä—Å–∏—è)
/// </summary>
public class PlayerController : MonoBehaviour
{
    [Header("Movement")]
    [SerializeField] private float moveSpeed = 10f;
    [SerializeField] private float maxSpeed = 15f;

    [Header("Impulse")]
    [SerializeField] private float impulseRadius = 5f;
    [SerializeField] private float impulseForce = 20f;
    [SerializeField] private float impulseCooldown = 1.5f;

    [Header("Visual")]
    [SerializeField] private GameObject impulsePrefab; // –ü—Ä–µ—Ñ–∞–± –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–æ–ª–Ω—ã
    [SerializeField] private float screenShakeDuration = 0.2f;
    [SerializeField] private float screenShakeIntensity = 0.3f;

    private Rigidbody2D rb;
    private float lastImpulseTime = -999f;
    private Vector2 moveInput;

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        
        if (rb == null)
        {
            Debug.LogError("PlayerController: Rigidbody2D –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ Rigidbody2D –∫ –∏–≥—Ä–æ–∫—É.");
        }
    }

    void Update()
    {
        // –í–≤–æ–¥ –¥–≤–∏–∂–µ–Ω–∏—è
        moveInput.x = Input.GetAxisRaw("Horizontal");
        moveInput.y = Input.GetAxisRaw("Vertical");
        moveInput = moveInput.normalized;

        // –ò–º–ø—É–ª—å—Å
        if (Input.GetKeyDown(KeyCode.Space) || Input.GetMouseButtonDown(0))
        {
            TryUseImpulse();
        }
    }

    void FixedUpdate()
    {
        // –î–≤–∏–∂–µ–Ω–∏–µ
        if (moveInput.magnitude > 0.1f)
        {
            rb.AddForce(moveInput * moveSpeed, ForceMode2D.Force);

            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
            if (rb.linearVelocity.magnitude > maxSpeed)
            {
                rb.linearVelocity = rb.linearVelocity.normalized * maxSpeed;
            }
        }
    }

    void TryUseImpulse()
    {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if (Time.time - lastImpulseTime < impulseCooldown)
        {
            float remaining = impulseCooldown - (Time.time - lastImpulseTime);
            Debug.Log($"‚è≥ –ò–º–ø—É–ª—å—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ! –û—Å—Ç–∞–ª–æ—Å—å: {remaining:F1}—Å");
            return;
        }

        UseImpulse();
        lastImpulseTime = Time.time;
    }

    void UseImpulse()
    {
        Debug.Log("üí• –ò–ú–ü–£–õ–¨–°!");

        // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤–æ–ª–Ω—ã
        if (impulsePrefab != null)
        {
            GameObject impulseEffect = Instantiate(impulsePrefab, transform.position, Quaternion.identity);
            Destroy(impulseEffect, 1f); // –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        }

        // Screen shake —ç—Ñ—Ñ–µ–∫—Ç
        CameraShake();

        // –§–∏–∑–∏–∫–∞ - –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—ë –≤ —Ä–∞–¥–∏—É—Å–µ (2D)
        Collider2D[] hitColliders = Physics2D.OverlapCircleAll(transform.position, impulseRadius);
        
        int enemiesHit = 0;

        foreach (Collider2D col in hitColliders)
        {
            // –ù–µ —Ç–æ–ª–∫–∞–µ–º —Å–µ–±—è
            if (col.gameObject == gameObject) continue;

            Rigidbody2D targetRb = col.GetComponent<Rigidbody2D>();
            if (targetRb != null)
            {
                // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ –∫ —Ü–µ–ª–∏
                Vector2 direction = ((Vector2)col.transform.position - (Vector2)transform.position).normalized;
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–ª—É
                targetRb.AddForce(direction * impulseForce, ForceMode2D.Impulse);
                Debug.Log($"namr {col.gameObject}/ {direction * impulseForce}");
                // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ –≤—Ä–∞–≥–µ
                if (col.CompareTag("Enemy"))
                {
                    enemiesHit++;
                    StartCoroutine(FlashEnemy(col.GetComponent<SpriteRenderer>()));

                    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–Ω–∫ - –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
                    TankEnemy tank = col.GetComponent<TankEnemy>();
                    if (tank != null)
                    {
                        tank.TakeHit(impulseForce);
                    }
                }

                Debug.Log($"üéØ –û—Ç–±—Ä–æ—à–µ–Ω: {col.gameObject.name}");
            }
        }

        if (enemiesHit > 0)
        {
            Debug.Log($"üí™ –ü–æ–ø–∞–¥–∞–Ω–∏–µ! –í—Ä–∞–≥–æ–≤ –æ—Ç–±—Ä–æ—à–µ–Ω–æ: {enemiesHit}");
        }
        else
        {
            Debug.Log("‚ùå –ü—Ä–æ–º–∞—Ö! –ù–µ—Ç –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ.");
        }
    }

    // –≠—Ñ—Ñ–µ–∫—Ç –≤—Å–ø—ã—à–∫–∏ –Ω–∞ –≤—Ä–∞–≥–µ –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏
    System.Collections.IEnumerator FlashEnemy(SpriteRenderer enemySprite)
    {
        if (enemySprite == null) yield break;

        Color originalColor = enemySprite.color;
        enemySprite.color = Color.white; // –í—Å–ø—ã—à–∫–∞ –±–µ–ª—ã–º

        yield return new WaitForSeconds(0.1f);

        if (enemySprite != null)
        {
            enemySprite.color = originalColor;
        }
    }

    // Screen shake —ç—Ñ—Ñ–µ–∫—Ç
    void CameraShake()
    {
        Camera mainCam = Camera.main;
        if (mainCam != null)
        {
            CameraShakeEffect shakeEffect = mainCam.GetComponent<CameraShakeEffect>();
            if (shakeEffect == null)
            {
                shakeEffect = mainCam.gameObject.AddComponent<CameraShakeEffect>();
            }
            shakeEffect.Shake(screenShakeDuration, screenShakeIntensity);
        }
    }

    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–¥–∏—É—Å–∞ –∏–º–ø—É–ª—å—Å–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.cyan;
        Gizmos.DrawWireSphere(transform.position, impulseRadius);
    }

    // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è UI (–∫—É–ª–¥–∞—É–Ω)
    public float GetImpulseCooldownProgress()
    {
        float timePassed = Time.time - lastImpulseTime;
        return Mathf.Clamp01(timePassed / impulseCooldown);
    }
}