using UnityEngine;

/// <summary>
/// –¢–∞–Ω–∫ - –º–µ–¥–ª–µ–Ω–Ω—ã–π, —É—Å—Ç–æ–π—á–∏–≤—ã–π, —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ –∏–º–ø—É–ª—å—Å–æ–≤
/// </summary>
[RequireComponent(typeof(EnemyAI))]
public class TankEnemy : MonoBehaviour
{
    [Header("Tank Settings")]
    [SerializeField] private int hitsToDestroy = 5; // –°–∫–æ–ª—å–∫–æ –∏–º–ø—É–ª—å—Å–æ–≤ –¥–æ —Å–º–µ—Ä—Ç–∏
    [SerializeField] private float armorReduction = 0.5f; // –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–∏–ª—ã –æ—Ç–±—Ä–æ—Å–∞
    [SerializeField] private bool showHealthBar = true;

    [Header("Visual")]
    [SerializeField] private Color damageColor = Color.white;
    [SerializeField] private GameObject healthBarPrefab;

    private int currentHits = 0;
    private SpriteRenderer spriteRenderer;
    private Color originalColor;
    private GameObject healthBarInstance;
    private Transform healthBarFill;

    void Start()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();
        if (spriteRenderer != null)
        {
            originalColor = spriteRenderer.color;
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—Å—É (—Ç—è–∂–µ–ª—ã–π)
        Rigidbody2D rb = GetComponent<Rigidbody2D>();
        if (rb != null)
        {
            rb.mass = 3f;
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        transform.localScale = Vector3.one * 1.5f;

        // –°–æ–∑–¥–∞–µ–º health bar
        if (showHealthBar)
        {
            CreateHealthBar();
        }
    }

    void CreateHealthBar()
    {
        // –ü—Ä–æ—Å—Ç–æ–π health bar –∏–∑ –¥–≤—É—Ö —Å–ø—Ä–∞–π—Ç–æ–≤
        healthBarInstance = new GameObject("HealthBar");
        healthBarInstance.transform.SetParent(transform);
        healthBarInstance.transform.localPosition = new Vector3(0, 0.8f, 0);
        healthBarInstance.transform.localScale = Vector3.one;

        // –§–æ–Ω (–∫—Ä–∞—Å–Ω—ã–π)
        GameObject background = new GameObject("Background");
        background.transform.SetParent(healthBarInstance.transform);
        background.transform.localPosition = Vector3.zero;
        SpriteRenderer bgSprite = background.AddComponent<SpriteRenderer>();
        bgSprite.sprite = CreateQuadSprite();
        bgSprite.color = Color.red;
        bgSprite.sortingOrder = 10;
        background.transform.localScale = new Vector3(1f, 0.1f, 1);

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (–∑–µ–ª–µ–Ω—ã–π)
        GameObject fill = new GameObject("Fill");
        fill.transform.SetParent(healthBarInstance.transform);
        fill.transform.localPosition = Vector3.zero;
        SpriteRenderer fillSprite = fill.AddComponent<SpriteRenderer>();
        fillSprite.sprite = CreateQuadSprite();
        fillSprite.color = Color.green;
        fillSprite.sortingOrder = 11;
        fill.transform.localScale = new Vector3(1f, 0.1f, 1);
        
        healthBarFill = fill.transform;
    }

    Sprite CreateQuadSprite()
    {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –±–µ–ª—ã–π —Å–ø—Ä–∞–π—Ç
        Texture2D texture = new Texture2D(1, 1);
        texture.SetPixel(0, 0, Color.white);
        texture.Apply();
        return Sprite.Create(texture, new Rect(0, 0, 1, 1), new Vector2(0.5f, 0.5f));
    }

    void Update()
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º health bar
        if (healthBarFill != null)
        {
            float healthPercent = 1f - (float)currentHits / hitsToDestroy;
            healthBarFill.localScale = new Vector3(healthPercent, 0.1f, 1);
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç
            SpriteRenderer fillSprite = healthBarFill.GetComponent<SpriteRenderer>();
            if (fillSprite != null)
            {
                fillSprite.color = Color.Lerp(Color.red, Color.green, healthPercent);
            }
        }
    }

    public void TakeHit(float impulseForceMagnitude)
    {
        currentHits++;

        Debug.Log($"{gameObject.name}: –ü–æ–ª—É—á–∏–ª —É–¥–∞—Ä {currentHits}/{hitsToDestroy}");

        // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        if (spriteRenderer != null)
        {
            StopAllCoroutines();
            StartCoroutine(FlashDamage());
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏
        if (currentHits >= hitsToDestroy)
        {
            Die();
        }
    }

    System.Collections.IEnumerator FlashDamage()
    {
        spriteRenderer.color = damageColor;
        yield return new WaitForSeconds(0.1f);
        
        if (spriteRenderer != null)
        {
            spriteRenderer.color = originalColor;
        }
    }

    void Die()
    {
        Debug.Log($"üíÄ {gameObject.name}: –£–Ω–∏—á—Ç–æ–∂–µ–Ω!");

        // –£–≤–µ–¥–æ–º–ª—è–µ–º GameManager
        GameManager gm = FindFirstObjectByType<GameManager>();
        if (gm != null)
        {
            gm.OnEnemyDied();
        }

        Destroy(gameObject);
    }

    // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏–ª—ã –æ—Ç–±—Ä–æ—Å–∞
    void OnCollisionEnter2D(Collision2D collision)
    {
        // –ï—Å–ª–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –∏–º–ø—É–ª—å—Å–æ–º –∏–≥—Ä–æ–∫–∞
        if (collision.gameObject.CompareTag("Player"))
        {
            // –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç–±—Ä–æ—Å —á–µ—Ä–µ–∑ Rigidbody
            Rigidbody2D rb = GetComponent<Rigidbody2D>();
            if (rb != null)
            {
                rb.linearVelocity *= armorReduction;
            }
        }
    }

    void OnDrawGizmosSelected()
    {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –≤—Ä–∞–≥ —Ç—è–∂–µ–ª—ã–π
        Gizmos.color = Color.gray;
        Gizmos.DrawWireSphere(transform.position, 1f);
    }
}
