using UnityEngine;
using System.Collections;

/// <summary>
/// –í—Ä–∞–≥-—Å—Ç—Ä–µ–ª–æ–∫ - –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–ø—É–ª—å—Å –∫–∞–∫ –∏–≥—Ä–æ–∫
/// –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ EnemyAI –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
/// </summary>
public class EnemyShooter : MonoBehaviour
{
    [Header("Shooting Settings")]
    [SerializeField] private float impulseRadius = 4f;
    [SerializeField] private float impulseForce = 15f; // –°–ª–∞–±–µ–µ —á–µ–º —É –∏–≥—Ä–æ–∫–∞
    [SerializeField] private float impulseCooldown = 3f; // –î–æ–ª—å—à–µ —á–µ–º —É –∏–≥—Ä–æ–∫–∞
    [SerializeField] private float shootRange = 8f; // –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Å—Ç—Ä–µ–ª—å–±—ã

    [Header("AI Behavior")]
    [SerializeField] private float minShootDistance = 3f; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è (–Ω–µ —Å—Ç—Ä–µ–ª—è–µ—Ç –≤–ø–ª–æ—Ç–Ω—É—é)
    [SerializeField] private float maxShootDistance = 10f; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
    [SerializeField] private float shootChance = 0.7f; // –®–∞–Ω—Å –≤—ã—Å—Ç—Ä–µ–ª–∞ –∫–æ–≥–¥–∞ –∫—É–ª–¥–∞—É–Ω –≥–æ—Ç–æ–≤ (0-1)

    [Header("Visual")]
    [SerializeField] private GameObject enemyImpulsePrefab; // –ü—Ä–µ—Ñ–∞–± –≤–æ–ª–Ω—ã –≤—Ä–∞–≥–∞ (–∫—Ä–∞—Å–Ω–∞—è)
    [SerializeField] private float chargeUpTime = 0.5f; // –í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã—Å—Ç—Ä–µ–ª–æ–º
    [SerializeField] private Color chargeColor = Color.red; // –¶–≤–µ—Ç –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ

    [Header("Advanced")]
    [SerializeField] private bool shootAtPlayer = true; // –°—Ç—Ä–µ–ª—è–µ—Ç –≤ –∏–≥—Ä–æ–∫–∞
    [SerializeField] private bool avoidFriendlyFire = true; // –ù–µ —Å—Ç—Ä–µ–ª—è–µ—Ç –µ—Å–ª–∏ –∑–∞–¥–µ–Ω–µ—Ç —Å–æ—é–∑–Ω–∏–∫–æ–≤

    private Transform player;
    private SpriteRenderer spriteRenderer;
    private Color originalColor;
    private float lastShootTime = -999f;
    private bool isCharging = false;

    void Start()
    {
        // –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞
        GameObject playerObj = GameObject.FindGameObjectWithTag("Player");
        if (playerObj != null)
        {
            player = playerObj.transform;
        }

        spriteRenderer = GetComponent<SpriteRenderer>();
        if (spriteRenderer != null)
        {
            originalColor = spriteRenderer.color;
        }
    }

    void Update()
    {
        if (player == null || isCharging) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Å—Ç—Ä–µ–ª–∞
        if (CanShoot())
        {
            // –°–ª—É—á–∞–π–Ω—ã–π —à–∞–Ω—Å –≤—ã—Å—Ç—Ä–µ–ª–∞
            if (Random.value < shootChance * Time.deltaTime)
            {
                StartCoroutine(ChargeAndShoot());
            }
        }
    }

    bool CanShoot()
    {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if (Time.time - lastShootTime < impulseCooldown)
        {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –∏–≥—Ä–æ–∫–∞
        float distanceToPlayer = Vector2.Distance(transform.position, player.position);
        
        if (distanceToPlayer < minShootDistance || distanceToPlayer > maxShootDistance)
        {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ friendly fire
        if (avoidFriendlyFire && WouldHitAllies())
        {
            return false;
        }

        return true;
    }

    bool WouldHitAllies()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—é–∑–Ω–∏–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
        Collider2D[] hitColliders = Physics2D.OverlapCircleAll(transform.position, impulseRadius);
        
        foreach (Collider2D col in hitColliders)
        {
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥—Ä—É–≥–æ–≥–æ –≤—Ä–∞–≥–∞ –≤ —Ä–∞–¥–∏—É—Å–µ - –Ω–µ —Å—Ç—Ä–µ–ª—è–µ–º
            if (col.CompareTag("Enemy") && col.gameObject != gameObject)
            {
                return true;
            }
        }

        return false;
    }

    IEnumerator ChargeAndShoot()
    {
        isCharging = true;

        // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - –º–∏–≥–∞–Ω–∏–µ
        float elapsed = 0f;
        while (elapsed < chargeUpTime)
        {
            if (spriteRenderer != null)
            {
                // –ú–∏–≥–∞–µ–º –º–µ–∂–¥—É –∫—Ä–∞—Å–Ω—ã–º –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
                float t = (Mathf.Sin(elapsed * 20f) + 1f) * 0.5f;
                spriteRenderer.color = Color.Lerp(originalColor, chargeColor, t);
            }

            elapsed += Time.deltaTime;
            yield return null;
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç
        if (spriteRenderer != null)
        {
            spriteRenderer.color = originalColor;
        }

        // –í–´–°–¢–†–ï–õ!
        Shoot();

        isCharging = false;
    }

    void Shoot()
    {
        Debug.Log($"üî¥ {gameObject.name} —Å—Ç—Ä–µ–ª—è–µ—Ç –∏–º–ø—É–ª—å—Å–æ–º!");

        lastShootTime = Time.time;

        // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤–æ–ª–Ω—ã
        if (enemyImpulsePrefab != null)
        {
            GameObject impulseEffect = Instantiate(enemyImpulsePrefab, transform.position, Quaternion.identity);
            Destroy(impulseEffect, 1f);
        }

        // –§–∏–∑–∏–∫–∞ - –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—ë –≤ —Ä–∞–¥–∏—É—Å–µ (2D)
        Collider2D[] hitColliders = Physics2D.OverlapCircleAll(transform.position, impulseRadius);
        
        int targetsHit = 0;

        foreach (Collider2D col in hitColliders)
        {
            // –ù–µ —Ç–æ–ª–∫–∞–µ–º —Å–µ–±—è
            if (col.gameObject == gameObject) continue;

            Rigidbody2D targetRb = col.GetComponent<Rigidbody2D>();
            if (targetRb != null)
            {
                // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞–≥–∞ –∫ —Ü–µ–ª–∏
                Vector2 direction = ((Vector2)col.transform.position - (Vector2)transform.position).normalized;
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–ª—É
                targetRb.AddForce(direction * impulseForce, ForceMode2D.Impulse);

                // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ —Ü–µ–ª–∏
                if (col.CompareTag("Player"))
                {
                    targetsHit++;
                    Debug.Log($"üéØ –í—Ä–∞–≥ –ø–æ–ø–∞–ª –≤ –∏–≥—Ä–æ–∫–∞ –∏–º–ø—É–ª—å—Å–æ–º!");
                    StartCoroutine(FlashTarget(col.GetComponent<SpriteRenderer>(), Color.red));
                }
                else if (col.CompareTag("Enemy"))
                {
                    targetsHit++;
                    StartCoroutine(FlashTarget(col.GetComponent<SpriteRenderer>(), Color.yellow));
                }
            }
        }

        if (targetsHit > 0)
        {
            Debug.Log($"üí• –í—Ä–∞–≥ –æ—Ç–±—Ä–æ—Å–∏–ª {targetsHit} —Ü–µ–ª–µ–π!");
        }
    }

    IEnumerator FlashTarget(SpriteRenderer targetSprite, Color flashColor)
    {
        if (targetSprite == null) yield break;

        Color originalColor = targetSprite.color;
        targetSprite.color = flashColor;

        yield return new WaitForSeconds(0.1f);

        if (targetSprite != null)
        {
            targetSprite.color = originalColor;
        }
    }

    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–¥–∏—É—Å–∞ –∏–º–ø—É–ª—å—Å–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    void OnDrawGizmosSelected()
    {
        // –†–∞–¥–∏—É—Å –∏–º–ø—É–ª—å—Å–∞ (–∫—Ä–∞—Å–Ω—ã–π)
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(transform.position, impulseRadius);

        // –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Å—Ç—Ä–µ–ª—å–±—ã (–∂–µ–ª—Ç—ã–π)
        Gizmos.color = Color.yellow;
        Gizmos.DrawWireSphere(transform.position, minShootDistance);
        Gizmos.DrawWireSphere(transform.position, maxShootDistance);
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–≤–Ω–µ

    public void ForceShoot()
    {
        if (!isCharging)
        {
            StartCoroutine(ChargeAndShoot());
        }
    }

    public float GetCooldownProgress()
    {
        float timePassed = Time.time - lastShootTime;
        return Mathf.Clamp01(timePassed / impulseCooldown);
    }

    public bool IsReadyToShoot()
    {
        return Time.time - lastShootTime >= impulseCooldown;
    }
}
