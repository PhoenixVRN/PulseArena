using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≤—É—à–µ–∫ - —Å–ø–∞–≤–Ω–∏—Ç —á–µ—Ä–Ω—ã–µ –¥—ã—Ä—ã –Ω–∞ –∞—Ä–µ–Ω–µ
/// </summary>
public class TrapManager : MonoBehaviour
{
    [Header("Black Hole Settings")]
    [SerializeField] private GameObject blackHolePrefab;
    [SerializeField] private int minBlackHoles = 1;
    [SerializeField] private int maxBlackHoles = 3;

    [Header("Spawn Settings")]
    [SerializeField] private float arenaRadius = 18f; // –ß—É—Ç—å –º–µ–Ω—å—à–µ –≥—Ä–∞–Ω–∏—Ü—ã –∞—Ä–µ–Ω—ã
    [SerializeField] private float minDistanceFromCenter = 5f; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    [SerializeField] private float minDistanceBetweenHoles = 4f; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥—ã—Ä–∞–º–∏

    [Header("Size Randomization")]
    [SerializeField] private Vector2 sizeRange = new Vector2(0.5f, 2f); // –ú–∏–Ω –∏ –º–∞–∫—Å —Ä–∞–∑–º–µ—Ä
    [SerializeField] private bool randomizeOnStart = true;
    [SerializeField] private float respawnInterval = 15f; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –¥—ã—Ä (0 = –±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è)

    [Header("Advanced")]
    [SerializeField] private bool avoidPlayerSpawn = true;
    [SerializeField] private float playerSafeRadius = 8f;

    private List<GameObject> activeBlackHoles = new List<GameObject>();
    private float lastRespawnTime = 0f;

    void Start()
    {
        if (randomizeOnStart)
        {
            SpawnRandomBlackHoles();
        }
    }

    void Update()
    {
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –¥—ã—Ä —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (respawnInterval > 0 && Time.time - lastRespawnTime > respawnInterval)
        {
            ClearBlackHoles();
            SpawnRandomBlackHoles();
            lastRespawnTime = Time.time;
            
            Debug.Log($"üîÑ –ß–µ—Ä–Ω—ã–µ –¥—ã—Ä—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã! –ù–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ.");
        }
    }

    public void SpawnRandomBlackHoles()
    {
        int count = Random.Range(minBlackHoles, maxBlackHoles + 1);
        
        Debug.Log($"üï≥Ô∏è –°–æ–∑–¥–∞—é {count} —á–µ—Ä–Ω—ã—Ö –¥—ã—Ä –Ω–∞ –∞—Ä–µ–Ω–µ...");

        for (int i = 0; i < count; i++)
        {
            Vector2 position = GetRandomValidPosition();
            float size = Random.Range(sizeRange.x, sizeRange.y);
            
            SpawnBlackHole(position, size);
        }
    }

    Vector2 GetRandomValidPosition()
    {
        int maxAttempts = 30;
        Vector2 position = Vector2.zero;
        GameObject player = GameObject.FindGameObjectWithTag("Player");

        for (int attempt = 0; attempt < maxAttempts; attempt++)
        {
            // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –∫–æ–ª—å—Ü–µ (–Ω–µ –≤ —Ü–µ–Ω—Ç—Ä–µ, –Ω–µ —É –∫—Ä–∞—è)
            Vector2 randomDirection = Random.insideUnitCircle.normalized;
            float randomDistance = Random.Range(minDistanceFromCenter, arenaRadius);
            position = randomDirection * randomDistance;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ù–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –∏–≥—Ä–æ–∫—É
            if (avoidPlayerSpawn && player != null)
            {
                float distanceToPlayer = Vector2.Distance(position, player.transform.position);
                if (distanceToPlayer < playerSafeRadius)
                {
                    continue; // –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –∏–≥—Ä–æ–∫—É, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                }
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –¥—Ä—É–≥–∏–º –¥—ã—Ä–∞–º
            bool tooClose = false;
            foreach (GameObject hole in activeBlackHoles)
            {
                if (hole == null) continue;
                
                float distance = Vector2.Distance(position, hole.transform.position);
                if (distance < minDistanceBetweenHoles)
                {
                    tooClose = true;
                    break;
                }
            }

            if (!tooClose)
            {
                return position; // –ù–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–∑–∏—Ü–∏—é!
            }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞ 30 –ø–æ–ø—ã—Ç–æ–∫ - –≤–µ—Ä–Ω–µ–º —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ
        Debug.LogWarning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –¥—ã—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–ø—ã—Ç–∫—É");
        return position;
    }

    void SpawnBlackHole(Vector2 position, float size)
    {
        if (blackHolePrefab == null)
        {
            Debug.LogError("TrapManager: –ü—Ä–µ—Ñ–∞–± —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            return;
        }

        GameObject hole = Instantiate(blackHolePrefab, position, Quaternion.identity);
        hole.transform.SetParent(transform); // –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é
        hole.transform.localScale = Vector3.one * size;
        hole.tag = "BlackHole"; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–≥ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Ä–∞–≥–∞–º–∏
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä –ø–æ–¥ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
        CircleCollider2D collider = hole.GetComponent<CircleCollider2D>();
        if (collider != null)
        {
            // –ö–æ–ª–ª–∞–π–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–Ω–∏–º–∞—Ç—å –≤–µ—Å—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥—ã—Ä—ã
            // –ë–∞–∑–æ–≤—ã–π —Ä–∞–¥–∏—É—Å = 0.5 (–ø–æ–ª–æ–≤–∏–Ω–∞ Circle Sprite), —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ —Ä–∞–∑–º–µ—Ä
            collider.radius = 0.5f; // –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - radius = 0.5 –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤–µ—Å—å –∫—Ä—É–≥ –ø—Ä–∏ scale = size
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç BlackHole
        BlackHole blackHoleScript = hole.GetComponent<BlackHole>();
        if (blackHoleScript != null)
        {
            // –†–∞–¥–∏—É—Å –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω —Ä–∞–∑–º–µ—Ä—É –¥—ã—Ä—ã
            blackHoleScript.SetPullRadius(size * 3f); // –í 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        }

        activeBlackHoles.Add(hole);
        
        Debug.Log($"‚úÖ –ß–µ—Ä–Ω–∞—è –¥—ã—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {position}, —Ä–∞–∑–º–µ—Ä: {size:F2}");
    }

    public void ClearBlackHoles()
    {
        foreach (GameObject hole in activeBlackHoles)
        {
            if (hole != null)
            {
                Destroy(hole);
            }
        }
        
        activeBlackHoles.Clear();
        Debug.Log("üóëÔ∏è –í—Å–µ —á–µ—Ä–Ω—ã–µ –¥—ã—Ä—ã —É–¥–∞–ª–µ–Ω—ã");
    }

    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—ã—Ä—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–µ—Å—Ç–µ
    public void SpawnBlackHoleAt(Vector2 position, float size = 1f)
    {
        SpawnBlackHole(position, size);
    }

    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω—ã —Å–ø–∞–≤–Ω–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    void OnDrawGizmosSelected()
    {
        // –í–Ω–µ—à–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        Gizmos.color = Color.yellow;
        DrawCircle(Vector2.zero, arenaRadius, 50);

        // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (–º–µ—Ä—Ç–≤–∞—è –∑–æ–Ω–∞)
        Gizmos.color = Color.green;
        DrawCircle(Vector2.zero, minDistanceFromCenter, 30);

        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ –∏–≥—Ä–æ–∫–∞
        if (avoidPlayerSpawn)
        {
            GameObject player = GameObject.FindGameObjectWithTag("Player");
            if (player != null)
            {
                Gizmos.color = new Color(0, 1f, 0, 0.3f);
                DrawCircle(player.transform.position, playerSafeRadius, 30);
            }
        }
    }

    void DrawCircle(Vector2 center, float radius, int segments)
    {
        float angle = 0f;
        Vector3 lastPoint = center + new Vector2(Mathf.Cos(angle), Mathf.Sin(angle)) * radius;
        
        for (int i = 1; i <= segments; i++)
        {
            angle = (float)i / segments * 2f * Mathf.PI;
            Vector3 newPoint = center + new Vector2(Mathf.Cos(angle), Mathf.Sin(angle)) * radius;
            Gizmos.DrawLine(lastPoint, newPoint);
            lastPoint = newPoint;
        }
    }
}
