using UnityEngine;
using System.Collections;

/// <summary>
/// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π - —Å–ø–∞–≤–Ω –≤–æ–ª–Ω, —Å—á—ë—Ç, —Å–æ—Å—Ç–æ—è–Ω–∏–µ (2D –≤–µ—Ä—Å–∏—è)
/// </summary>
public class GameManager : MonoBehaviour
{
    [Header("Wave Settings")]
    [SerializeField] private GameObject enemyPrefab;
    [SerializeField] private Transform arenaCenter;
    [SerializeField] private float spawnRadius = 15f;
    [SerializeField] private int initialEnemyCount = 3;
    [SerializeField] private float timeBetweenWaves = 3f;

    [Header("Difficulty")]
    [SerializeField] private float enemyIncreasePerWave = 1f; // –°–∫–æ–ª—å–∫–æ –≤—Ä–∞–≥–æ–≤ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞–∂–¥—É—é –≤–æ–ª–Ω—É
    [SerializeField] private float speedIncreasePerWave = 0.1f; // –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤

    private int currentWave = 0;
    private int enemiesAlive = 0;
    private int score = 0;
    private bool gameActive = false;

    void Start()
    {
        // –ï—Å–ª–∏ arenaCenter –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º (0,0)
        if (arenaCenter == null)
        {
            GameObject centerObj = new GameObject("ArenaCenter");
            arenaCenter = centerObj.transform;
            arenaCenter.position = Vector2.zero;
        }

        StartGame();
    }

    void Update()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤—Ä–∞–≥–∏
        if (gameActive && enemiesAlive <= 0)
        {
            // –í–æ–ª–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            StartCoroutine(StartNextWave());
        }
    }

    void StartGame()
    {
        gameActive = true;
        currentWave = 0;
        score = 0;
        
        Debug.Log("üéÆ –ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨!");
        SpawnWave();
    }

    IEnumerator StartNextWave()
    {
        gameActive = false; // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏
        
        Debug.Log($"‚úÖ –í–æ–ª–Ω–∞ {currentWave} –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°—á—ë—Ç: {score}");
        Debug.Log($"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –≤–æ–ª–Ω–∞ —á–µ—Ä–µ–∑ {timeBetweenWaves}—Å...");
        
        yield return new WaitForSeconds(timeBetweenWaves);
        
        SpawnWave();
        gameActive = true;
    }

    void SpawnWave()
    {
        currentWave++;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞–≥–æ–≤
        int enemyCount = Mathf.RoundToInt(initialEnemyCount + (currentWave - 1) * enemyIncreasePerWave);
        
        Debug.Log($"üåä –í–û–õ–ù–ê {currentWave}! –í—Ä–∞–≥–æ–≤: {enemyCount}");

        for (int i = 0; i < enemyCount; i++)
        {
            SpawnEnemy();
        }

        enemiesAlive = enemyCount;
    }

    void SpawnEnemy()
    {
        if (enemyPrefab == null)
        {
            Debug.LogError("GameManager: –ü—Ä–µ—Ñ–∞–± –≤—Ä–∞–≥–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            return;
        }

        // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ –∫—Ä—É–≥—É –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞ –∞—Ä–µ–Ω—ã (2D)
        Vector2 randomCircle = Random.insideUnitCircle * spawnRadius;
        Vector3 spawnPosition = (Vector2)arenaCenter.position + randomCircle;
        spawnPosition.z = 0; // –û–±–Ω—É–ª—è–µ–º Z –¥–ª—è 2D

        GameObject enemy = Instantiate(enemyPrefab, spawnPosition, Quaternion.identity);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞–≥–æ–≤ —Å –∫–∞–∂–¥–æ–π –≤–æ–ª–Ω–æ–π
        EnemyAI enemyAI = enemy.GetComponent<EnemyAI>();
        if (enemyAI != null)
        {
            // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            // enemyAI.SetSpeed(baseSpeed + currentWave * speedIncreasePerWave);
        }

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–º–µ—Ä—Ç—å –≤—Ä–∞–≥–∞ (–ø–æ–∫–∞ –≤—Ä—É—á–Ω—É—é, –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ)
        enemy.name = $"Enemy_{currentWave}_{enemiesAlive}";
    }

    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Ä–∞–≥ —É–º–∏—Ä–∞–µ—Ç
    public void OnEnemyDied()
    {
        enemiesAlive--;
        score += 10;
        
        Debug.Log($"üíÄ –í—Ä–∞–≥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω! –û—Å—Ç–∞–ª–æ—Å—å: {enemiesAlive}, –°—á—ë—Ç: {score}");
    }

    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω—ã —Å–ø–∞–≤–Ω–∞ (2D –∫—Ä—É–≥)
    void OnDrawGizmosSelected()
    {
        if (arenaCenter == null) return;
        
        Gizmos.color = Color.yellow;
        
        // –†–∏—Å—É–µ–º –∫—Ä—É–≥ –≤ 2D
        int segments = 30;
        float angle = 0f;
        Vector3 lastPoint = (Vector2)arenaCenter.position + new Vector2(Mathf.Cos(angle), Mathf.Sin(angle)) * spawnRadius;
        
        for (int i = 1; i <= segments; i++)
        {
            angle = (float)i / segments * 2f * Mathf.PI;
            Vector3 newPoint = (Vector2)arenaCenter.position + new Vector2(Mathf.Cos(angle), Mathf.Sin(angle)) * spawnRadius;
            Gizmos.DrawLine(lastPoint, newPoint);
            lastPoint = newPoint;
        }
    }
}