using UnityEngine;
using System.Collections;
using System.Collections.Generic;

/// <summary>
/// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π - —Å–ø–∞–≤–Ω –≤–æ–ª–Ω —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≤—Ä–∞–≥–æ–≤, —Å—á—ë—Ç, —Å–æ—Å—Ç–æ—è–Ω–∏–µ
/// </summary>
public class GameManager : MonoBehaviour
{
    [Header("Enemy Prefabs")]
    [SerializeField] private GameObject basicEnemyPrefab;
    [SerializeField] private GameObject shooterEnemyPrefab;
    [SerializeField] private GameObject fastEnemyPrefab;
    [SerializeField] private GameObject dasherEnemyPrefab;
    [SerializeField] private GameObject teleporterEnemyPrefab;
    [SerializeField] private GameObject tankEnemyPrefab;

    [Header("Wave Settings")]
    [SerializeField] private Transform arenaCenter;
    [SerializeField] private float spawnRadius = 15f;
    [SerializeField] private float timeBetweenWaves = 3f;

    [Header("Wave Progression")]
    [SerializeField] private int shooterUnlockWave = 3; // –° –∫–∞–∫–æ–π –≤–æ–ª–Ω—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è Shooter
    [SerializeField] private int fastUnlockWave = 4; // Fast Enemy
    [SerializeField] private int dasherUnlockWave = 5; // Dasher
    [SerializeField] private int teleporterUnlockWave = 6; // Teleporter
    [SerializeField] private int tankUnlockWave = 7; // Tank

    private int currentWave = 0;
    private int enemiesAlive = 0;
    private int score = 0;
    private bool gameActive = false;

    void Start()
    {
        // –ï—Å–ª–∏ arenaCenter –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º (0,0)
        if (arenaCenter == null)
        {
            GameObject centerObj = new GameObject("ArenaCenter");
            arenaCenter = centerObj.transform;
            arenaCenter.position = Vector2.zero;
        }

        StartGame();
    }

    void Update()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤—Ä–∞–≥–∏
        if (gameActive && enemiesAlive <= 0)
        {
            // –í–æ–ª–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            StartCoroutine(StartNextWave());
        }
    }

    void StartGame()
    {
        gameActive = true;
        currentWave = 0;
        score = 0;
        
        Debug.Log("üéÆ –ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨!");
        SpawnWave();
    }

    IEnumerator StartNextWave()
    {
        gameActive = false; // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏
        
        Debug.Log($"‚úÖ –í–æ–ª–Ω–∞ {currentWave} –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°—á—ë—Ç: {score}");
        Debug.Log($"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –≤–æ–ª–Ω–∞ —á–µ—Ä–µ–∑ {timeBetweenWaves}—Å...");
        
        yield return new WaitForSeconds(timeBetweenWaves);
        
        SpawnWave();
        gameActive = true;
    }

    void SpawnWave()
    {
        currentWave++;
        
        Debug.Log($"üåä –í–û–õ–ù–ê {currentWave}!");

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ –≤–æ–ª–Ω—ã
        List<GameObject> waveComposition = GetWaveComposition(currentWave);

        // –°–ø–∞–≤–Ω–∏–º –≤—Ä–∞–≥–æ–≤
        foreach (GameObject enemyPrefab in waveComposition)
        {
            if (enemyPrefab != null)
            {
                SpawnEnemy(enemyPrefab);
            }
        }

        enemiesAlive = waveComposition.Count;
        Debug.Log($"–í—Ä–∞–≥–æ–≤ –≤ –≤–æ–ª–Ω–µ: {enemiesAlive}");
    }

    List<GameObject> GetWaveComposition(int wave)
    {
        List<GameObject> enemies = new List<GameObject>();

        // –í–û–õ–ù–ê 1-2: –¢–æ–ª—å–∫–æ Basic
        if (wave <= 2)
        {
            for (int i = 0; i < 3 + wave; i++)
            {
                enemies.Add(basicEnemyPrefab);
            }
        }
        // –í–û–õ–ù–ê 3-4: Basic + Shooter
        else if (wave <= 4)
        {
            for (int i = 0; i < 2; i++)
            {
                enemies.Add(basicEnemyPrefab);
            }
            enemies.Add(shooterEnemyPrefab);
            
            if (wave == 4)
            {
                enemies.Add(shooterEnemyPrefab);
            }
        }
        // –í–û–õ–ù–ê 5-6: Basic + Shooter + Fast
        else if (wave <= 6)
        {
            enemies.Add(basicEnemyPrefab);
            enemies.Add(shooterEnemyPrefab);
            
            for (int i = 0; i < 2; i++)
            {
                enemies.Add(fastEnemyPrefab);
            }
            
            if (wave == 6)
            {
                enemies.Add(dasherEnemyPrefab);
            }
        }
        // –í–û–õ–ù–ê 7-8: –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ + Tank
        else if (wave <= 8)
        {
            enemies.Add(tankEnemyPrefab);
            enemies.Add(basicEnemyPrefab);
            enemies.Add(basicEnemyPrefab);
            enemies.Add(shooterEnemyPrefab);
            enemies.Add(fastEnemyPrefab);
            
            if (wave == 8)
            {
                enemies.Add(dasherEnemyPrefab);
                enemies.Add(teleporterEnemyPrefab);
            }
        }
        // –í–û–õ–ù–ê 9+: –≠–∫—Å—Ç—Ä–∏–º
        else
        {
            // –¢–∞–Ω–∫–∏
            int tankCount = Mathf.Min((wave - 7) / 2, 3);
            for (int i = 0; i < tankCount; i++)
            {
                enemies.Add(tankEnemyPrefab);
            }

            // Shooter
            for (int i = 0; i < 2; i++)
            {
                enemies.Add(shooterEnemyPrefab);
            }

            // Dasher
            for (int i = 0; i < 2; i++)
            {
                enemies.Add(dasherEnemyPrefab);
            }

            // Teleporter
            enemies.Add(teleporterEnemyPrefab);
            enemies.Add(teleporterEnemyPrefab);

            // Fast
            for (int i = 0; i < 3; i++)
            {
                enemies.Add(fastEnemyPrefab);
            }
        }

        return enemies;
    }

    void SpawnEnemy(GameObject enemyPrefab)
    {
        if (enemyPrefab == null)
        {
            Debug.LogWarning("GameManager: –ü—Ä–µ—Ñ–∞–± –≤—Ä–∞–≥–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            return;
        }

        // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ –∫—Ä—É–≥—É –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞ –∞—Ä–µ–Ω—ã (2D)
        Vector2 randomCircle = Random.insideUnitCircle * spawnRadius;
        Vector3 spawnPosition = (Vector2)arenaCenter.position + randomCircle;
        spawnPosition.z = 0; // –û–±–Ω—É–ª—è–µ–º Z –¥–ª—è 2D

        GameObject enemy = Instantiate(enemyPrefab, spawnPosition, Quaternion.identity);
        enemy.name = $"{enemyPrefab.name}_Wave{currentWave}";

        Debug.Log($"‚úÖ –°–æ–∑–¥–∞–Ω: {enemy.name} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {spawnPosition}");
    }

    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Ä–∞–≥ —É–º–∏—Ä–∞–µ—Ç
    public void OnEnemyDied()
    {
        enemiesAlive--;
        score += 10;
        
        Debug.Log($"üíÄ –í—Ä–∞–≥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω! –û—Å—Ç–∞–ª–æ—Å—å: {enemiesAlive}, –°—á—ë—Ç: {score}");
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è UI
    public int GetCurrentWave() => currentWave;
    public int GetScore() => score;
    public int GetEnemiesAlive() => enemiesAlive;

    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω—ã —Å–ø–∞–≤–Ω–∞ (2D –∫—Ä—É–≥)
    void OnDrawGizmosSelected()
    {
        if (arenaCenter == null) return;
        
        Gizmos.color = Color.yellow;
        
        // –†–∏—Å—É–µ–º –∫—Ä—É–≥ –≤ 2D
        int segments = 30;
        float angle = 0f;
        Vector3 lastPoint = (Vector2)arenaCenter.position + new Vector2(Mathf.Cos(angle), Mathf.Sin(angle)) * spawnRadius;
        
        for (int i = 1; i <= segments; i++)
        {
            angle = (float)i / segments * 2f * Mathf.PI;
            Vector3 newPoint = (Vector2)arenaCenter.position + new Vector2(Mathf.Cos(angle), Mathf.Sin(angle)) * spawnRadius;
            Gizmos.DrawLine(lastPoint, newPoint);
            lastPoint = newPoint;
        }
    }
}