using UnityEngine;

/// <summary>
/// –ì—Ä–∞–Ω–∏—Ü–∞ –∞—Ä–µ–Ω—ã - —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã, –≤—ã—à–µ–¥—à–∏–µ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã (2D –≤–µ—Ä—Å–∏—è)
/// </summary>
public class ArenaBoundary : MonoBehaviour
{
    [Header("Settings")]
    [SerializeField] private float arenaRadius = 20f;
    [SerializeField] private Vector2 arenaCenter = Vector2.zero;

    void Update()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–∫–∞
        GameObject player = GameObject.FindGameObjectWithTag("Player");
        if (player != null)
        {
            CheckBoundary(player);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–∞–≥–æ–≤
        GameObject[] enemies = GameObject.FindGameObjectsWithTag("Enemy");
        foreach (GameObject enemy in enemies)
        {
            if (CheckBoundary(enemy))
            {
                // –í—Ä–∞–≥ –≤—ã—à–µ–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É - —É–Ω–∏—á—Ç–æ–∂–∞–µ–º
                Debug.Log($"üíÄ –í—Ä–∞–≥ {enemy.name} –≤—ã—à–µ–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É!");
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º GameManager
                GameManager gm = FindFirstObjectByType<GameManager>();
                if (gm != null)
                {
                    gm.OnEnemyDied();
                }
                
                Destroy(enemy);
            }
        }
    }

    bool CheckBoundary(GameObject obj)
    {
        float distance = Vector2.Distance((Vector2)obj.transform.position, arenaCenter);
        
        if (distance > arenaRadius)
        {
            if (obj.CompareTag("Player"))
            {
                // –ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É - Game Over
                Debug.LogWarning("üíÄ GAME OVER! –ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É!");
                // TODO: –í—ã–∑–≤–∞—Ç—å Game Over
                return false; // –ù–µ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ–∫–∞
            }
            
            return true; // –û–±—ä–µ–∫—Ç –≤—ã—à–µ–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É
        }

        return false;
    }

    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞–Ω–∏—Ü—ã –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ (2D - –∫—Ä—É–≥ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ XY)
    void OnDrawGizmos()
    {
        Gizmos.color = Color.red;
        
        // –†–∏—Å—É–µ–º –∫—Ä—É–≥ –≤ 2D (–Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ XY)
        int segments = 50;
        float angle = 0f;
        Vector3 lastPoint = arenaCenter + new Vector2(Mathf.Cos(angle), Mathf.Sin(angle)) * arenaRadius;
        
        for (int i = 1; i <= segments; i++)
        {
            angle = (float)i / segments * 2f * Mathf.PI;
            Vector3 newPoint = arenaCenter + new Vector2(Mathf.Cos(angle), Mathf.Sin(angle)) * arenaRadius;
            Gizmos.DrawLine(lastPoint, newPoint);
            lastPoint = newPoint;
        }
    }
}