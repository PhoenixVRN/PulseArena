using UnityEngine;

/// <summary>
/// –ß–µ—Ä–Ω–∞—è –¥—ã—Ä–∞ - —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –≤—Å—ë —á—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤–Ω—É—Ç—Ä—å
/// </summary>
public class BlackHole : MonoBehaviour
{
    [Header("Settings")]
    [SerializeField] private float pullForce = 5f; // –°–∏–ª–∞ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è
    [SerializeField] private float pullRadius = 3f; // –†–∞–¥–∏—É—Å –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è (–±–æ–ª—å—à–µ —á–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä)
    [SerializeField] private bool visualizeRadius = true;

    [Header("Visual")]
    [SerializeField] private float rotationSpeed = 30f; // –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è
    [SerializeField] private ParticleSystem particles; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã

    private CircleCollider2D triggerCollider;

    void Start()
    {
        triggerCollider = GetComponent<CircleCollider2D>();
        
        if (triggerCollider != null)
        {
            triggerCollider.isTrigger = true;
        }

        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (particles == null)
        {
            CreateParticles();
        }
    }

    void Update()
    {
        // –í—Ä–∞—â–µ–Ω–∏–µ –¥—ã—Ä—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∞
        transform.Rotate(Vector3.forward * rotationSpeed * Time.deltaTime);
    }

    void FixedUpdate()
    {
        // –ü—Ä–∏—Ç—è–≥–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —Ä–∞–¥–∏—É—Å–µ
        PullNearbyObjects();
    }

    void PullNearbyObjects()
    {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Ä–∞–¥–∏—É—Å–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è
        Collider2D[] nearbyObjects = Physics2D.OverlapCircleAll(transform.position, pullRadius);

        foreach (Collider2D col in nearbyObjects)
        {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ —Å–∞–º—É –¥—ã—Ä—É
            if (col.isTrigger || col.gameObject == gameObject) continue;

            Rigidbody2D rb = col.GetComponent<Rigidbody2D>();
            if (rb != null)
            {
                // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä—É –¥—ã—Ä—ã
                Vector2 direction = ((Vector2)transform.position - rb.position).normalized;
                float distance = Vector2.Distance(transform.position, rb.position);

                // –°–∏–ª–∞ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è —É–±—ã–≤–∞–µ—Ç —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
                float pullStrength = pullForce * (1f - distance / pullRadius);
                
                rb.AddForce(direction * pullStrength, ForceMode2D.Force);
            }
        }
    }

    void OnTriggerEnter2D(Collider2D other)
    {
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Ä–∞–≥–æ–≤
        if (other.CompareTag("Enemy"))
        {
            Debug.Log($"üï≥Ô∏è –í—Ä–∞–≥ {other.gameObject.name} —É–ø–∞–ª –≤ —á–µ—Ä–Ω—É—é –¥—ã—Ä—É!");
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º GameManager
            GameManager gm = FindFirstObjectByType<GameManager>();
            if (gm != null)
            {
                gm.OnEnemyDied();
            }

            Destroy(other.gameObject);
        }
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –∏–≥—Ä–æ–∫–∞ (Game Over)
        else if (other.CompareTag("Player"))
        {
            Debug.LogError("üíÄüíÄüíÄ GAME OVER! –ò–≥—Ä–æ–∫ —É–ø–∞–ª –≤ —á–µ—Ä–Ω—É—é –¥—ã—Ä—É! üíÄüíÄüíÄ");
            
            // TODO: –í—ã–∑–≤–∞—Ç—å Game Over —ç–∫—Ä–∞–Ω
            
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –∏–≥—Ä–æ–∫–∞ (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω—ã)
            Time.timeScale = 0.5f; // –ó–∞–º–µ–¥–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ—Å—Ç–∏
            Destroy(other.gameObject, 0.5f); // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —á–µ—Ä–µ–∑ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã
            
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ü–µ–Ω—ã
            // Invoke("RestartGame", 1f);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–¥–∏—É—Å–∞ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ TrapManager)
    public void SetPullRadius(float radius)
    {
        pullRadius = radius;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã (–ø–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω)
    /*
    void RestartGame()
    {
        Time.timeScale = 1f;
        UnityEngine.SceneManagement.SceneManager.LoadScene(
            UnityEngine.SceneManagement.SceneManager.GetActiveScene().buildIndex
        );
    }
    */

    void CreateParticles()
    {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —á–∞—Å—Ç–∏—Ü—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        GameObject particlesObj = new GameObject("Particles");
        particlesObj.transform.SetParent(transform);
        particlesObj.transform.localPosition = Vector3.zero;
        
        particles = particlesObj.AddComponent<ParticleSystem>();
        
        var main = particles.main;
        main.startLifetime = 1f;
        main.startSpeed = 1f;
        main.startSize = 0.2f;
        main.startColor = new Color(0.5f, 0f, 0.8f, 0.5f); // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        main.maxParticles = 50;
        
        var emission = particles.emission;
        emission.rateOverTime = 20;
        
        var shape = particles.shape;
        shape.shapeType = ParticleSystemShapeType.Circle;
        shape.radius = pullRadius * 0.8f;
    }

    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–¥–∏—É—Å–∞ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    void OnDrawGizmos()
    {
        if (!visualizeRadius) return;

        // –†–∞–¥–∏—É—Å –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è (–∂–µ–ª—Ç—ã–π)
        Gizmos.color = new Color(1f, 1f, 0f, 0.3f);
        Gizmos.DrawWireSphere(transform.position, pullRadius);

        // –†–∞–¥–∏—É—Å —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è (–∫—Ä–∞—Å–Ω—ã–π)
        if (triggerCollider != null)
        {
            Gizmos.color = new Color(1f, 0f, 0f, 0.5f);
            Gizmos.DrawWireSphere(transform.position, triggerCollider.radius);
        }
    }
}
